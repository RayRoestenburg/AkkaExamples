####################
# Akka Config File #
####################

# This file has all the default settings, so all these could be removed with no visible effect.
# Modify as needed.

akka {
  version = "1.0-SNAPSHOT" # Akka version, checked against the runtime version of Akka.

  time-unit = "seconds" # Default timeout time unit for all timeout properties throughout the config

  # These boot classes are loaded (and created) automatically when the Akka Microkernel boots up
  #     Can be used to bootstrap your application(s)
  #     Should be the FQN (Fully Qualified Name) of the boot class which needs to have a default constructor
  boot = ["boot.Boot"]

  actor {
    timeout = 5                        # Default timeout for Future based invocations
                                       #    - Actor:        !! && !!!
                                       #    - UntypedActor: sendRequestReply && sendRequestReplyFuture
                                       #    - TypedActor:   methods with non-void return type
    serialize-messages = off           # Does a deep clone of (non-primitive) messages to ensure immutability
    throughput = 5                     # Default throughput for all ExecutorBasedEventDrivenDispatcher, set to 1 for complete fairness
    throughput-deadline-ms = -1        # Default throughput deadline for all ExecutorBasedEventDrivenDispatcher, set to 0 or negative for no deadline

    default-dispatcher {
      type = "GlobalExecutorBasedEventDriven" # Must be one of the following, all "Global*" are non-configurable
                                              #   - Hawt
                                              #   - ExecutorBasedEventDriven
                                              #   - ExecutorBasedEventDrivenWorkStealing
                                              #   - ReactorBasedThreadPoolEventDriven
                                              #   - ReactorBasedSingleThreadEventDriven
                                              #   - GlobalHawt
                                              #   - GlobalExecutorBasedEventDriven
                                              #   - GlobalReactorBasedSingleThreadEventDriven
                                              #   - GlobalReactorBasedThreadPoolEventDriven
      keep-alive-ms = 60000            # Keep alive time for threads
      core-pool-size-factor = 1.0      # No of core threads ... ceil(available processors * factor)
      max-pool-size-factor  = 4.0      # Max no of threads ... ceil(available processors * factor)
      executor-bounds = -1             # Makes the Executor bounded, -1 is unbounded
      allow-core-timeout = on          # Allow core threads to time out
      rejection-policy = "caller-runs" # abort, caller-runs, discard-oldest, discard
      throughput = 5                   # Throughput for ExecutorBasedEventDrivenDispatcher, set to 1 for complete fairness
      throughput-deadline-ms = -1      # Throughput deadline for ExecutorBasedEventDrivenDispatcher, set to 0 or negative for no deadline
      aggregate = off                  # Aggregate on/off for HawtDispatchers
      mailbox-capacity = -1            # If negative (or zero) then an unbounded mailbox is used (default)
                                       # If positive then a bounded mailbox is used and the capacity is set using the property
                                       # NOTE: setting a mailbox to 'blocking' can be a bit dangerous,
                                       #       could lead to deadlock, use with care
                                       #
                                       # The following are only used for ExecutorBasedEventDriven
                                       # and only if mailbox-capacity > 0
      mailbox-push-timeout-ms = 10000  # Specifies the timeout (in milliseconds) to add a new message to a mailbox that is full
    }
  }

  stm {
    fair             = on     # Should global transactions be fair or non-fair (non fair yield better performance)
    max-retries      = 1000
    timeout          = 5      # Default timeout for blocking transactions and transaction set (in unit defined by
                              #     the time-unit property)
    write-skew       = true
    blocking-allowed = false
    interruptible    = false
    speculative      = true
    quick-release    = true
    propagation      = "requires"
    trace-level      = "none"
    hooks            = true
    jta-aware        = off    # Option 'on' means that if there JTA Transaction Manager available then the STM will
                              #     begin (or join), commit or rollback the JTA transaction. Default is 'off'.
  }

  jta {
    provider = "from-jndi" # Options: - "from-jndi" (means that Akka will try to detect a TransactionManager in the JNDI)
                           #          - "atomikos" (means that Akka will use the Atomikos based JTA impl in 'akka-jta',
                           #            e.g. you need the akka-jta JARs on classpath).
    timeout = 60
  }

  remote {
    compression-scheme = "zlib" # Options: "zlib" (lzf to come), leave out for no compression
    zlib-compression-level = 6  # Options: 0-9 (1 being fastest and 9 being the most compressed), default is 6

    client {
      reconnect-delay = 5
      read-timeout = 10
      reconnection-time-window = 600 # Maximum time window that a client should try to reconnect for
    }

    cluster {
      service = on
      name = "default"                                                        # The name of the cluster
      serializer = "se.scalablesolutions.akka.serialization.Serializer$Java$" # FQN of the serializer class
    }
  }
}